<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"

       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"

       default-lazy-init="false" default-autowire="byName">

    <!--加载配置文件-->
    <context:property-placeholder location="classpath*:/mybatis/mybatis.properties" ignore-unresolvable="true"/>

    <bean id="mybatisDataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--c3P0 配置-->
    <!--<bean id="mybatisDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->
        <!--<property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>-->
        <!--<property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/springstudy?serverTimezone=UTC"/>-->
        <!--<property name="user" value="root"/>-->
        <!--<property name="password" value="shouwang13"/>-->
    <!--</bean>-->

    <!--<bean name="mybatisDataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--init-method="init" destroy-method="close">-->
        <!--<property name="driverClassName" value="${jdbc.driverClassName}"/>-->
        <!--<property name="url" value="${jdbc.url}" />-->
        <!--<property name="username" value="${jdbc.username}}" />-->
        <!--<property name="password" value="${jdbc.password}" />-->
        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
        <!--<property name="initialSize" value="0" />-->
        <!--&lt;!&ndash; 连接池最大使用连接数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="20" />-->
        <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
        <!--<property name="minIdle" value="0" />-->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000" />-->
        <!--<property name="testOnBorrow" value="false" />-->
        <!--<property name="testOnReturn" value="false" />-->
        <!--<property name="testWhileIdle" value="true" />-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="25200000" />-->
        <!--&lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;-->
        <!--<property name="removeAbandoned" value="true" />-->
        <!--&lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="1800" />-->
        <!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="true" />-->
        <!--&lt;!&ndash; 监控数据库 &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="filters" value="stat" /> &ndash;&gt;-->
        <!--<property name="filters" value="mergeStat" />-->
    <!--</bean>-->

    <!--3 会话工厂bean sqlSessionFactoryBean -->
    <bean id="sqlSessionFactoryByName" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="mybatisDataSource"></property>
        <!-- 别名 指定在*mapper.xml中的paramType，可直接填写类名不用全路径-->
        <property name="typeAliasesPackage" value="com.azxx.demon.entity"></property>
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath*:com/azxx/demon/mapper/*Mapper.xml"></property>
    </bean>

    <!--4 自动扫描对象关系映射 -->
    <!--233，这里有个超级大坑，切记不要将上面ID配置为sqlSessionFactory，这会导致-->
    <!--MapperScannerConigurer实际是在解析加载bean定义阶段的，这个时候要是设置sqlSessionFactory的话，会导致提前初始化一些类，-->
    <!--这个时候，PropertyPlaceholderConfigurer还没来得及替换定义中的变量，导致把表达式当作字符串复制了，不能读取properties中的变量-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryByName"></property>
        <!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="com.azxx.demon.dao.mybatis"></property>
    </bean>


    <!--spring声明式事务管理控制-->
    <!--事物配置-->
    <!--<bean id="mybatisTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="mybatisDataSource"></property>-->
    <!--</bean>-->

    <!--方式一：通过配置配置事物-->
    <!--配置事务增强（如何管理事务，只读、读写...）
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="*save*" read-only="false"/>
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    -->
    <!--aop配置，拦截哪些方法（切入点表达式，拦截上面的事务增强）
    <aop:config>
        <aop:pointcut id="pt" expression="execution(* com.azxx.demon.service*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
    </aop:config>
    -->
    <!--方式二：通过注解配置事物-->
    <!--注解方式实现事务-->
    <!--<tx:annotation-driven transaction-manager="mybatisTxManager"/>-->



    <!--6 容器自动扫描IOC组件  -->
    <!--<context:component-scan base-package="com.azxx.demon"></context:component-scan>-->
</beans>
